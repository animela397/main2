name: Build & Sync With Adobe Git Repo

on:
  workflow_dispatch:
    inputs:
      artifactsJson:
        description: 'Maven artifacts represented as JSON array'
        required: false
        default: '[{}]'
      deploy_artifacts:
        description: 'Deploy artifacts'
        required: true
        default: 'false'

jobs:
  build-and-sync:
    runs-on: ubuntu-latest

    env:
      MAVEN_PRIVATE_REPO_USERNAME: ${{ secrets.MAVEN_PRIVATE_REPO_USERNAME }}
      MAVEN_PRIVATE_REPO_PASSWORD: ${{ secrets.MAVEN_PRIVATE_REPO_PASSWORD }}
      MAVEN_PRIVATE_REPO_URL: ${{ secrets.MAVEN_PRIVATE_REPO_URL }}
      REMOTE_GIT_REPO_URL: ${{ secrets.REMOTE_GIT_REPO_URL }}
      CM_AIO_PROGRAM_ID: ${{ secrets.CM_PROGRAM_ID }}
      CM_PROD_PIPELINE_ID: ${{ secrets.CM_PROD_PIPELINE_ID }}
      CM_DEV_PIPELINE_ID: ${{ secrets.CM_DEV_PIPELINE_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Validate Artifacts JSON
        id: validate-json
        run: |
          if [ -n "${{ github.event.inputs.artifactsJson }}" ]; then
            echo "${{ github.event.inputs.artifactsJson }}" 
            echo "${{ github.event.inputs.artifactsJson }}" | jq '.' > artifacts.json
            echo "artifact_json_valid=true" >> $GITHUB_ENV
          else
            echo "No artifacts JSON provided."
            echo "artifact_json_valid=false" >> $GITHUB_ENV
          fi
      - name: Process Artifacts JSON
        if: env.artifact_json_valid == 'true'
        run: |
          set -e
          set -x
          pip install lxml requests     
          ls -ltr all/
          echo "${{ github.event.inputs.artifactsJson }}" | jq '.' > artifacts.json
          python scripts/process_artifacts.py --json-content "$(cat artifacts.json)"
          git --no-pager diff all/pom.xml
          ls -ltrR all/lib

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Install Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.2

      - name: Configure Maven Settings
        uses: s4u/maven-settings-action@v3.1.0

      - name: Validate Build (Develop)
        if: github.ref_name == 'develop'
        run: |
          mvn clean install -U -s.mvn/settings.xml -DskipTests

      - name: Commit downloaded artifacts (Develop)
        if: github.ref_name == 'develop'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add all/pom.xml
          git add all/lib/*
          if git diff --cached --quiet; then
              echo "No changes to commit."
            else
                git commit -m "Add downloaded artifacts to all/lib + POM Updates"
                git status
                git push origin HEAD
            fi

      - name: Patch Private Artifacts (Develop)
        if: github.ref_name == 'develop' && github.event.inputs.deploy_artifacts == 'true'
        run: |
          # Commit the version change back to the repository
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add all/maven-repo/com/practice/*
          git commit -m "private artifacts"
          git format-patch -1 HEAD -o /tmp/patches
          mv /tmp/patches/0001-*.patch /tmp/patches/private-artifacts.patch
          git reset --hard origin/develop

      - name: Sync with Adobe Git (Develop)
        if: github.ref_name == 'develop' && github.event.inputs.deploy_artifacts == 'true'
        run: |
          set -e
          set -x
          git show-ref --verify --quiet refs/heads/sandbox/develop-artifacts && git branch -D sandbox/develop-artifacts
          git remote remove adobe || true
          git remote add adobe "${{ env.REMOTE_GIT_REPO_URL }}"
          git rev-parse --is-shallow-repository
          git fetch adobe
          echo git checkout -b sandbox/develop-artifacts adobe/sandbox/develop-artifacts
          git checkout -b sandbox/develop-artifacts adobe/sandbox/develop-artifacts
          git pull adobe sandbox/develop-artifacts
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          # May result in conflicts when done for the first time
          if ! git merge develop --allow-unrelated-histories --strategy-option ours --no-edit; then
            echo "Merge conflicts detected:"
            git diff --name-only --diff-filter=U
            git diff
            exit 1
          fi
          git rev-parse --is-shallow-repository
          git status
          git push adobe sandbox/develop-artifacts
          rm -Rf all/maven-repo/com/practice/
          git apply /tmp/patches/private-artifacts.patch
          git add all/maven-repo/com/practice/*
          git commit -m "resetting private artifacts"
          git config --list
          git --version
          git log --oneline -n 5
          git rev-parse --is-shallow-repository
          git status
          git push adobe sandbox/develop-artifacts
          git checkout develop

      - name: Bump Version (Develop)
        if: github.ref_name == 'develop' && github.event.inputs.deploy_artifacts == 'true' && success()
        run: |
          # Increment the version for the next snapshot
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          new_version=$(echo $current_version | sed 's/-SNAPSHOT$//') # Remove SNAPSHOT for version increment

          # Increment the version (e.g., 1.0.0 -> 1.0.1)
          new_version=$(echo $new_version | awk -F. -v OFS=. '{ $NF++; } 1')-SNAPSHOT

          # Update the version in the pom.xml
          mvn versions:set -DnewVersion=$new_version

          # Commit the version change back to the repository
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git commit -am "Bump version to $new_version"
          git push origin develop

      - name: Set up Node.js
        if: github.event.inputs.deploy_artifacts == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup Adobe IO CLI
        uses: adobe/aio-cli-setup-action@1.3.0
        if: github.event.inputs.deploy_artifacts == 'true'

      - name: Install & Configure - Adobe I/O CLI & Plugins
        if: github.event.inputs.deploy_artifacts == 'true'
        run: |
          set -e
          set -x
          aio plugins:install @adobe/aio-cli-plugin-cloudmanager
          echo "${{ secrets.CM_API_SERVICE_ACCOUNT_JSON }}" | base64 --decode > /tmp/aio-service-account.json
          aio config:set ims.contexts.aio-cli-plugin-cloudmanager /tmp/aio-service-account.json --file --json
          echo "config json reset"
          aio config:set cloudmanager_programid ${{ env.CM_AIO_PROGRAM_ID }}
          echo "program id set"
          aio cloudmanager:program:list-pipelines
          echo "above pipelines are the accurate list for the given program id"
      - name: Deploy Packages (AEMaaCS Dev Env)
        if: github.ref_name == 'develop' && github.event.inputs.deploy_artifacts == 'true'
        run: |
          aio cloudmanager pipeline create-execution ${{ env.CM_DEV_PIPELINE_ID }}