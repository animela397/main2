name: Build & Sync With Adobe Git Repo

on:
  workflow_dispatch:

jobs:
  build-and-sync:
    runs-on: ubuntu-latest

    env:
      MAVEN_PRIVATE_REPO_USERNAME: ${{ secrets.MAVEN_PRIVATE_REPO_USERNAME }}
      MAVEN_PRIVATE_REPO_PASSWORD: ${{ secrets.MAVEN_PRIVATE_REPO_PASSWORD }}
      MAVEN_PRIVATE_REPO_URL: ${{ secrets.MAVEN_PRIVATE_REPO_URL }}
      REMOTE_GIT_REPO_URL: ${{ secrets.REMOTE_GIT_REPO_URL }}
      CM_AIO_PROGRAM_ID: ${{ secrets.CM_PROGRAM_ID }}
      CM_PROD_PIPELINE_ID: ${{ secrets.CM_PROD_PIPELINE_ID }}
      CM_DEV_PIPELINE_ID: ${{ secrets.CM_DEV_PIPELINE_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

#      - name: Install & Configure - Adobe I/O CLI & Plugins
#        run: |
#          set -e
#          set -x
#          npm install -g @adobe/aio-cli
#          aio plugins:install @adobe/aio-cli-plugin-cloudmanager
#          echo "${{ secrets.CM_API_SERVICE_ACCOUNT_JSON }}" | base64 --decode > /tmp/aio-service-account.json
#          aio config:set ims.contexts.aio-cli-plugin-cloudmanager /tmp/aio-service-account.json --file --json
#          echo "config json reset"
#          aio config:set cloudmanager_programid ${{ env.CM_AIO_PROGRAM_ID }}
#          echo "program id set"
#          aio cloudmanager:program:list-pipelines
#          echo "above pipelines are the accurate list for the given program id"

      - name: Set up Maven with settings.xml
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Validate Build (Develop)
        if: github.ref_name == 'develop'
        run: |
          mvn clean install -U -s.mvn/settings.xml -DskipTests
          # Commit the version change back to the repository
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add all/maven-repo/com/practice/*
          git commit -m "private artifacts"
          git format-patch -1 HEAD -o /tmp/patches
          mv /tmp/patches/0001-*.patch /tmp/patches/private-artifacts.patch
          git reset --hard origin/develop

      - name: Sync with Adobe Git (Develop)
        if: github.ref_name == 'develop'
        run: |
          git show-ref --verify --quiet refs/heads/sandbox/develop-artifacts && git branch -D sandbox/develop-artifacts
          git remote remove adobe || true
          git remote add adobe "${{ env.REMOTE_GIT_REPO_URL }}"
          git fetch adobe --deepen=1000000
          echo git checkout -b sandbox/develop-artifacts adobe/sandbox/develop-artifacts
          git checkout -b sandbox/develop-artifacts adobe/sandbox/develop-artifacts
          git pull adobe sandbox/develop-artifacts
          # May result in conflicts when done for the first time
          if ! git merge develop --allow-unrelated-histories --strategy-option ours --no-edit; then
            echo "Merge conflicts detected:"
            git diff --name-only --diff-filter=U
            git diff
            exit 1
          fi
          rm -Rf all/maven-repo/com/practice/
          git apply /tmp/patches/private-artifacts.patch
          git add all/maven-repo/com/practice/*
          git commit -m "resetting private artifacts"
                    git config --list
          git --version
          git log --oneline -n 5
          git rev-parse --is-shallow-repository
          git push adobe sandbox/develop-artifacts
          git checkout develop

      - name: Bump Version (Develop)
        if: github.ref_name == 'develop' && success()
        run: |
          # Increment the version for the next snapshot
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          new_version=$(echo $current_version | sed 's/-SNAPSHOT$//') # Remove SNAPSHOT for version increment

          # Increment the version (e.g., 1.0.0 -> 1.0.1)
          new_version=$(echo $new_version | awk -F. -v OFS=. '{ $NF++; } 1')-SNAPSHOT

          # Update the version in the pom.xml
          mvn versions:set -DnewVersion=$new_version

          # Commit the version change back to the repository
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git commit -am "Bump version to $new_version"
          git push origin develop

#      - name: Deploy Packages (AEMaaCS Dev Env)
#        if: github.ref_name == 'develop'
#        run: |
#          aio cloudmanager pipeline create-execution ${{ env.CM_DEV_PIPELINE_ID }}